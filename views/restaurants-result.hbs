<h2>Where you want to go?</h2>

<div id="map"></div>
<!--<button type="submit" onclick="showMarkers({{markers}})">Show Markers</button>-->
<!--<button type="submit" onclick="calcRoute()">Route</button>-->
<div>
  <form id="routeSearchForm" action="#" method="GET">
    <label for="start">
      <input type="text" id="start" name="route-search-start" placeholder="starting point">
    </label>
    <label for="end">
      <input type="text" id="end" name="route-search-end" placeholder="destination">
    </label>
    <button type="submit" onclick="calcRoute()">Add route</button>
    <button type="submit" id="clear-route" onclick="clearRoute()">Clear route</button>
    <button type="submit" id="clear-markers" onclick="clearMarkers()">Clear markers</button>
    <form action="/route-search" method="POST">
      <label>
        <p>Save route to favorites <input class="updates" type="text" name="favorite"></p>
      </label>
      <button type="submit" id="save-route" onclick="">Save route</button>
    </form>

    <button type="submit" id="clear-markers" onclick="updatemarker()">Show Street Art</button>
  </form>
</div>
<button type="submit" onclick="getCurrentLocation()">Get current location</button>
<div>
  <form action="#" id="placesForm" method="GET">

    <input type="checkbox" id="restaurants" name="restaurants">
    <label for="restaurants">Restaurants</label>
    <input type="checkbox" id="bars" name="bars">
    <label for="bars">Bars</label>
    <input type="checkbox" id="bakeries" name="bakeries">
    <label for="bakeries">Bakeries</label>
    <input type="checkbox" id="supermarket" name="supermarkets">
    <label for="supermarket">Supermarket</label>
    <input type="checkbox" id="tourist_attraction" name="touristAttractions">
    <label for="tourist_attraction">Viewpoints</label>
    <input type="checkbox" id="art_gallery" name="artGalleries">
    <label for="art_gallery">Art Gallery</label>

    <button type="submit">Search Places</button>
  </form>
</div>
<script>
  let markers = [];
  let routeDestinationCoordinates;
  let directionsService;
  let directionsRenderer;


  function searchPlaces(event) {

    let restaurant = event.path[0][0];
    let bar = event.path[0][1];
    let bakeries = event.path[0][2];
    let supermarket = event.path[0][3];
    let touristAttraction = event.path[0][4];
    let artGallery = event.path[0][5];

    let checkedTypes = [];
    if (restaurant.checked) {
      // console.log(restaurant.checked)
      checkedTypes.push('restaurant')
    } else if (bar.checked) {
      checkedTypes.push('bar')
    } else if (bakeries.checked) {
      checkedTypes.push('bakery')
    } else if (supermarket.checked) {
      checkedTypes.push('supermarket')
    } else if (tourist_attraction.checked) {
      checkedTypes.push('tourist_attraction')
    } else if (art_gallery.checked) {
      checkedTypes.push('art_gallery')
    } else {
      clearMarkers();
    }

    if (!checkedTypes.length) {
      alert('Please select one option')
    } else {
      let request = {
        location: routeDestinationCoordinates,
        radius: "150",
        type: checkedTypes
      };
      let service = new google.maps.places.PlacesService(map)

      service.nearbySearch(request, (results, status) => {

        if (status === google.maps.places.PlacesServiceStatus.OK) {
          for (let i = 0; i < results.length; i++) {
            let name = results[i].name
            let lat = results[i].geometry.location.lat();
            let lng = results[i].geometry.location.lng();
            setMarker({ lat, lng }, name)
            map.setCenter(routeDestinationCoordinates);
            map.setZoom(18);
          };
        };
      });

    }
  };

  let streetarts = [];
  function getstreetart() {
    return axios.get('/api/streetart').then((results) => {
      streetarts = results.data.results;

    })
  }

  function updatemarker() {
    getstreetart().then(() => {
      streetarts.forEach(function (element) {
        const markerStreetart = new google.maps.Marker({
          position: new google.maps.LatLng(Number(element.lat), Number(element.lng)),
          map: map,
          icon: 'https://res.cloudinary.com/dt9z4xs6m/image/upload/v1605712720/purple-stars_t8wddi.png'

        });
        console.log(element)
        //streetarts.push(markerStreetart);
      })
    })
  }

  function calcRoute() {
    directionsService = new google.maps.DirectionsService();
    directionsRenderer = new google.maps.DirectionsRenderer();
    //let start = "Santa ApolÃ³nia, Lisboa";
    // let end = "Rato, Lisboa";
    let start = document.getElementById('start').value;
    let end = document.getElementById('end').value;
    let request = {
      origin: start,
      destination: end,
      travelMode: "WALKING"
    };
    directionsService.route(request, (result, status) => {
      if (status === "OK") {
        routeDestinationCoordinates = {
          lat: result.routes[0].legs[0].end_location.lat(),
          lng: result.routes[0].legs[0].end_location.lng(),
        }

        directionsRenderer.setDirections(result);

      }
      //  console.log(result)
    })
    directionsRenderer.setMap(map);
  }


  function showMarkers(markers) { // Markers will be an array of objects with {lat, lgn }
    markers.forEach((marker) => {
      setMarker(marker);
    });
  }

  function setMarker(marker, name) {
    // console.log('marker', marker);
    let customMarker = new google.maps.Marker({
      position: marker,
      map: map
    });
    const infowindow = new google.maps.InfoWindow({
      content: name,
    });
    customMarker.addListener("click", () => {
      infowindow.open(map, customMarker);
    });
    markers.push(customMarker)
  }


  function getCurrentLocation() { // Geolocation 
    navigator.geolocation.getCurrentPosition((position) => {
      const pos = {
        lat: position.coords.latitude,
        lng: position.coords.longitude
      }
      setMarker(pos);
      map.setCenter(pos);
      map.setZoom(13);
    });
  }

  document.getElementById('routeSearchForm').addEventListener('submit', (event) => {
    event.preventDefault();
  })

  document.getElementById('placesForm').addEventListener('submit', (event) => {
    event.preventDefault();
    searchPlaces(event);
  })

  // Sets the map on all markers in the array.
  function setMapOnAll(map) {
    for (let i = 0; i < markers.length; i++) {
      markers[i].setMap(map);
    }
  }

  function clearMarkers() {
    setMapOnAll(null);
    markers = [];
  }

  function clearRoute() {
    // Clear past routes
    directionsRenderer.setMap(null)
    document.getElementById('start').value = ''
    document.getElementById('end').value = ''
  }

</script>