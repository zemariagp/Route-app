<h2>Where you want to go?</h2>

<div id="map"></div>
<!--<button type="submit" onclick="showMarkers({{markers}})">Show Markers</button>-->
<!--<button type="submit" onclick="calcRoute()">Route</button>-->
<div>
  <form id="routeSearchForm" action="#" method="GET">
    <label for="start">
      <input type="text" id="start" name="route-search-start" placeholder="starting point">
    </label>
    <label for="end">
      <input type="text" id="end" name="route-search-end" placeholder="destination">
    </label>
    <button type="submit">Select route</button>
  </form>
</div>
<button type="submit" onclick="getCurrentLocation()">Get current location</button>
<button type="submit" onclick="searchPlaces()">Search Places</button>

<script>
  let routeDestinationCoordinates;
  /*

  const zomatoAPI = axios.create({
    baseURL: 'https://developers.zomato.com/api/v2.1/',
    headers: { 'user-key': "83cd93e9820f4153649a4d837be70144" }
  });

  function parseQuery(string) {
    string.replace(" ", "%")
  }

  function getFirst(restaurant) {
    zomatoAPI.get("/search", {
      params: {
        q: parseQuery(restaurant.name),
        sort: "real_distance",
        order: "desc",
        lat: restaurant.geometry.location.lat(),
        lon: restaurant.geometry.location.lng()
      }
    }).then((response) => {
      console.log(restaurant.name)
      console.log(response)
    })
  }

  let firstRestaurant;
*/
  function searchPlaces() {
    let request = {
      location: routeDestinationCoordinates,
      radius: "100",
      type: ["restaurant"]
    };
    let service = new google.maps.places.PlacesService(map);
    service.nearbySearch(request, (results, status) => {
      if (status === google.maps.places.PlacesServiceStatus.OK) {
        for (let i = 0; i < results.length; i++) {
          let name = results[i].name
          let lat = results[i].geometry.location.lat();
          let lng = results[i].geometry.location.lng();
          setMarker({ lat, lng }, name);
        }
        //   console.log(results)
        //   firstRestaurant = results[3];
        //   console.log(firstRestaurant)
        //   getFirst(firstRestaurant)
      }
    })
  }


  function calcRoute() {
    let directionsService = new google.maps.DirectionsService();
    let directionsRenderer = new google.maps.DirectionsRenderer();
    //let start = "Santa ApolÃ³nia, Lisboa";
    // let end = "Rato, Lisboa";
    let start = document.getElementById('start').value;
    let end = document.getElementById('end').value;
    let request = {
      origin: start,
      destination: end,
      travelMode: "DRIVING"
    };
    directionsService.route(request, (result, status) => {
      if (status === "OK") {
        routeDestinationCoordinates = {
          lat: result.routes[0].legs[0].end_location.lat(),
          lng: result.routes[0].legs[0].end_location.lng(),
        }

        directionsRenderer.setDirections(result);
      }
    })
    directionsRenderer.setMap(map);
  }


  function showMarkers(markers) { // Markers will be an array of objects with {lat, lgn }
    markers.forEach((marker) => {
      setMarker(marker);
    });
  }

  function setMarker(marker, name) {
    // console.log('marker', marker);
    let customMarker = new google.maps.Marker({
      position: marker,
      map: map
    });
    const infowindow = new google.maps.InfoWindow({
      content: name,
    });
    customMarker.addListener("click", () => {
      infowindow.open(map, customMarker);
    });
  }


  function getCurrentLocation() { // Geolocation 
    navigator.geolocation.getCurrentPosition((position) => {
      const pos = {
        lat: position.coords.latitude,
        lng: position.coords.longitude
      }
      map.setCenter(pos);
      map.setZoom(13);
    });
  }

  document.getElementById('routeSearchForm').addEventListener('submit', (event) => {
    event.preventDefault();
    calcRoute();
  })

</script>